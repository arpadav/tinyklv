use winnow::Parser;

// use misb::test_data::data;

const UHL: &'static [u8] = &[0x06, 0x0E, 0x2B, 0x34, 0x02, 0x0B, 0x01, 0x01, 0x0E, 0x01, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00];

fn uhl_take<'a>(input: &mut &'a [u8]) -> winnow::PResult<&'a [u8]> {
    winnow::token::literal(UHL).parse_next(input)
}

use tinyklv::prelude::*;
use misb::misb0601::Misb0601;
use rand::Rng;

fn main() {
    // let mut rng = rand::thread_rng();
    // let binding = {
    //     let data = data();
    //     let idx = rng.gen_range(0..data.len());
    //     data[idx].clone()
    // };
    // let input = &mut binding.as_slice();

    let mut data: &[u8] = &[
        0x06, 0x0e, 0x2b, 0x34, 0x02, 0x0b, 0x01, 0x01, 0x0e, 0x01, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00, 0x81, 0xc1, 0x02, 0x08, 0x00, 0x06, 0x12, 0x8c, 0x47, 0x59, 0x0f, 0x6b, 0x41, 0x01, 0x04, 0x05, 0x02, 0xb3, 0x46, 0x06, 0x02, 0xeb, 0xb3, 0x07, 0x02, 0xf9, 0x3d, 0x0b, 0x08, 0x45, 0x4f, 0x57, 0x20, 0x2d, 0x20, 0x44, 0x4c, 0x0c, 0x0e, 0x47, 0x65, 0x6f, 0x64, 0x65, 0x74, 0x69, 0x63, 0x20, 0x57, 0x47, 0x53, 0x38, 0x34, 0x0d, 0x04, 0x2e, 0x79, 0xe4, 0x4a, 0x0e, 0x04, 0xac, 0x9f, 0x63, 0x7f, 0x0f, 0x02, 0x35, 0x42, 0x10, 0x02, 0x02, 0x8a, 0x11, 0x02, 0x01, 0x6e, 0x12, 0x04, 0x69, 0x1b, 0x05, 0x80, 0x13, 0x04, 0xe5, 0x6d, 0x82, 0xd8, 0x14, 0x04, 0x00, 0x00, 0x00, 0x00, 0x15, 0x04, 0x00, 0x4d, 0x77, 0x16, 0x16, 0x02, 0x04, 0xb7, 0x17, 0x04, 0x2e, 0x86, 0x6a, 0x08, 0x18, 0x04, 0xac, 0xa5, 0x7c, 0x9d, 0x19, 0x02, 0x0b, 0x92, 0x1a, 0x02, 0x80, 0x00, 0x1b, 0x02, 0x80, 0x00, 0x1c, 0x02, 0x80, 0x00, 0x1d, 0x02, 0x80, 0x00, 0x1e, 0x02, 0x80, 0x00, 0x1f, 0x02, 0x80, 0x00, 0x20, 0x02, 0x80, 0x00, 0x21, 0x02, 0x80, 0x00, 0x28, 0x04, 0x2e, 0x86, 0x6a, 0x08, 0x29, 0x04, 0xac, 0xa5, 0x7c, 0x9d, 0x2a, 0x02, 0x0b, 0x92, 0x38, 0x01, 0x31, 0x39, 0x04, 0x00, 0x40, 0xc8, 0x21, 0x03, 0x0b, 0x49, 0x4d, 0x53, 0x41, 0x52, 0x20, 0x4d, 0x58, 0x2d, 0x31, 0x30, 0x01, 0x02, 0xf6, 0x0e,
        // 0x00, 0x00, 0x00,
        0x06, 0x0e, 0x2b, 0x34, 0x02, 0x0b, 0x01, 0x01, 0x0e, 0x01, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00, 0x73, 0x02, 0x08, 0x00, 0x06, 0x12, 0x8a, 0x86, 0xe2, 0x7e, 0x12, 0x41, 0x01, 0x04, 0x0b, 0x08, 0x45, 0x4f, 0x57, 0x20, 0x2d, 0x20, 0x44, 0x4c, 0x0c, 0x0e, 0x47, 0x65, 0x6f, 0x64, 0x65, 0x74, 0x69, 0x63, 0x20, 0x57, 0x47, 0x53, 0x38, 0x34, 0x0d, 0x04, 0x2e, 0xaa, 0x4f, 0x8e, 0x0e, 0x04, 0xac, 0xb4, 0xc1, 0x09, 0x0f, 0x02, 0x0d, 0x38, 0x10, 0x02, 0x2c, 0x5a, 0x11, 0x02, 0x18, 0xf3, 0x12, 0x04, 0x40, 0x3a, 0x4f, 0x80, 0x13, 0x04, 0x40, 0x01, 0x6c, 0x16, 0x14, 0x04, 0x00, 0x00, 0x00, 0x00, 0x19, 0x02, 0x0b, 0x94, 0x2a, 0x02, 0x0b, 0x94, 0x38, 0x01, 0x00, 0x39, 0x04, 0x00, 0x00, 0x00, 0x00, 0x03, 0x0b, 0x49, 0x4d, 0x53, 0x41, 0x52, 0x20, 0x4d, 0x58, 0x2d, 0x31, 0x30, 0x01, 0x02, 0x6b, 0x84,
    ];
    let input = &mut data;

    let results: winnow::PResult<Vec<Misb0601>> = winnow::combinator::repeat(0.., Misb0601::extract).parse_next(input);
    // let res = .parse_next(input);

    match results {
        Ok(results) => for res in results {
            println!("{:?}", res);
        },
        Err(e) => println!("{:?}", e),
    }

    println!("debug point");

    // fn main() {
    //     let bruh = tinyklv::scale!();
    // }
    // let bruh = winnow::
}